Acteurs :

- AXEIS : drône prototype 
- Nervure : voile
- CNES : ballon d'hélium (+ léger que air) BSO (ZPB en anglais) + expériences
- Expleo : vidéo + prémices
- Soben : trains d'atterissage
- Supaéro : école d'ingé dans l'aérospatial pour projets

PFE : PX4 -> nouveau modèle (airframe) pour parachute -> simulateur
PX4 s'interface avec ROS + plusieurs projets MEA

VM
QGroundControl pour flasher PX4 dans Pixhawk et 
SITL pour simuler le soft sans hardware (parachute ?) (intégrer un URDF dans ROS - Gazebo ?) à quel point c'est élaboré
Recherche simulation parachute pour interfacer

Dynamique : modèle avec finesse, quantité de ligne tirée pour inclinaison

Documentation pendant 1 mois:
- PX4 : airframes, interfaçage avec ROS, SITL, flash sur Pixhawk, …
- Pixhawk
- Simulateurs de parapente

------------------------------------------------------
11/10
Etat de l'art, plan, discussion intégration simulation
------------------------------------------------------





Notes Basic Concepts

Autopilot : drone's "brain" -> flight stack : ensemble de logiciels/systèmes pour drone (exemple : PX4)
QGroundControl : GCS (Ground Control Station) compatible PX4, telemetry radio
Pixhawk : flight controller hardware compatible PX4
- capteurs :
	- intégrés : gyroscope, acceleromètre, magnétomètre, baromètre
	- possibles : GPS, airspeed, rangefinder, optiques
- sorties (PMW,...) : moteurs, servos, actuators
- Sorties FMU (Flight Management Unit) et I/O (I/O Board). FMU = carte mère. I/O pour la redondance ou la sécurité en cas de défaillance ou redémarrage de FMU
FMU peut utiliser D-shot (protocole communication numérique) au lieu de PWM

Moteurs (brushless) contrôlés par ESC (Electronic Speed Controller)

Contrôlable avec Radio Control System ou Joystick/Gamepad via QGroundControl

Présence d'un Safety switch pour armer le drone, souvent intégré dans le module GPS
Présence d'un buzzer pour faire du bruit, souvent intégré dans le module GPS
Présence de LEDs, souvent intégrés dans le module GPS

Data/Telemetry Radios pour communication MAVLink (protocole de communication standardisé pour drones)

Companion computer (de préférence sur Linux)

SD Cards pour storage de flight logs

Payloads : cameras, instruments de mesure, etc. (pas utilisés pour le projet ?)

Notion de armé/désarmé

Flights modes : autonomous modes, manual modes

Notion de failsafe


Heading and Directions :
- x en face - roll
- y à droite - pitch
- z en bas - yaw

-----------------------------------------------------------------

Aiframes :

- Planes : ce qu'il faut utiliser
- Multicopters
- VTOL
- UGV/Rover

References pour Planes :
- Flying Wing : potentiellement à utiliser car similaire au parapente : surface portante continue, etc.
- Plane A-Tail
- Standard Plane

Adding a Frame Configuration :
frame configuration files -> shell scripts executed in QGroundControl

Tutos pour :
- Développer un frame configuration
- Ajouter configuration to firmware
- Ajouter configuration to sd card
- Ajouter un nouveau groupe d'airframes
- Ajouter un frame à QGroundControl

Fichier de configuration :
- documentation
- controllers et apps à start


-----------------------------------------------------------

Control Allocation (ou Mixing) :

Manière dont le système de contrôle de col convertir les commandes de contrôle en mouvements réels
Entrées : desired torque and thrust (couple et poussée)
Sorties : Actuators, moteurs, servos, etc.

Tutos pour :
- Ajouter une nouvelle geométrie ou ouput function
- Mettre la Default Frame Geometry
- paramétrer geometry et outputs


-----------------------------------------------------------

Simulation

Simulateurs supportés : Gazebo, Gazebo Classic

Simulateurs (hors Gazebo) utilisent simulator MAVLink API, qui gère la communication bi-directionnelle entre Flight Stack et Simulator

SITL Simulation Environment par exemple utilise la communication MAVLink :

____________________________
		            |
PX4 on SITL               | | <---> API/Offboard
         mavlink_main.cpp | |
	                  | | <---> QGroundControl/other <--- Joystick/Gamepad
                            |		      
    simulator_mavlink.cpp | | <---> Simulator
____________________________|

*voir la page pour les ports

Tuto pour la SITL

Gazebo vs jMAVSim (plus basique) ?

-------------------------------------------------------------

Drone Apps et API


- MAVSDK : fait pour PX4
- ROS2 : doit passer par MAVROS pour faire la liaison entre MAVLink et ROS
- ROS1 (pas recommandé)

Tutos pour chaque



---------------------------------------------------------
---------------------------------------------------------

PX4 Paramotor Project, by junwoo0914

- main branch in PX4 without modifications
- native Fixed Wing






































